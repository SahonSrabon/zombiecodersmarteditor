"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  FileText,
  Folder,
  Shield,
  Eye,
  CheckCircle,
  XCircle,
  Terminal,
  Code,
  Brain,
  Lock,
} from "lucide-react"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

interface PermissionRequest {
  id: string
  type: "scan" | "analyze" | "suggest" | "edit"
  message: string
  details: string
}

export default function BengaliPrivacyEditor() {
  const [code, setCode] = useState(`// ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
function greetUser(name) {
  console.log("Hello, " + name);
}

greetUser("‡¶¨‡¶®‡ßç‡¶ß‡ßÅ");`)

  const [isRecording, setIsRecording] = useState(false)
  const [isSpeaking, setIsSpeaking] = useState(false)
  const [consoleOutput, setConsoleOutput] = useState<string[]>(["ü§ñ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ï‡¶∞‡¶¨‡ßã ‡¶®‡¶æ‡•§"])
  const [currentPermission, setCurrentPermission] = useState<PermissionRequest | null>(null)
  const [privacySettings, setPrivacySettings] = useState({
    autoScan: false,
    voiceInput: true,
    voiceOutput: true,
    aiSuggestions: true,
    memoryStorage: false,
    internetAccess: false,
  })
  const [selectedFile, setSelectedFile] = useState<string | null>(null)
  const [analysisResult, setAnalysisResult] = useState<string | null>(null)

  const textareaRef = useRef<HTMLTextAreaElement>(null)

  const addToConsole = (message: string) => {
    setConsoleOutput((prev) => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  const requestPermission = (type: PermissionRequest["type"], message: string, details: string) => {
    setCurrentPermission({
      id: Date.now().toString(),
      type,
      message,
      details,
    })
  }

  const handlePermissionResponse = (granted: boolean) => {
    if (!currentPermission) return

    if (granted) {
      addToConsole(`‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${currentPermission.message}`)

      // Simulate AI processing based on permission type
      setTimeout(() => {
        switch (currentPermission.type) {
          case "analyze":
            setAnalysisResult(
              "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø ‡¶Ü‡¶õ‡ßá‡•§ ‡ß´ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶æ‡¶á‡¶®‡ßá 'greetUser' ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá template literal ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
            )
            addToConsole("üîç ‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®")
            break
          case "suggest":
            addToConsole("üí° ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®: console.log ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá `console.log(`Hello, ${name}`)` ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
            break
          case "scan":
            addToConsole("üìÅ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®‡•§ ‡ß©‡¶ü‡¶ø JavaScript ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
            break
          case "edit":
            setCode(code.replace('console.log("Hello, " + name);', "console.log(`Hello, ${name}`);"))
            addToConsole("‚úèÔ∏è ‡¶ï‡ßã‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
            break
        }
      }, 1500)
    } else {
      addToConsole(`‚ùå ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®: ${currentPermission.message}`)
    }

    setCurrentPermission(null)
  }

  const handleVoiceInput = () => {
    if (!privacySettings.voiceInput) {
      addToConsole("‚ùå ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá‡•§ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
      return
    }

    setIsRecording(!isRecording)

    if (!isRecording) {
      addToConsole("üéôÔ∏è ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ...")
      // Simulate voice recognition
      setTimeout(() => {
        setIsRecording(false)
        const voiceCommands = ["‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßã", "‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø", "‡¶ï‡ßã‡¶° ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º ‡¶¨‡¶≤‡ßã"]
        const randomCommand = voiceCommands[Math.floor(Math.random() * voiceCommands.length)]
        addToConsole(`üó£Ô∏è ‡¶∂‡ßÅ‡¶®‡ßá‡¶õ‡¶ø: "${randomCommand}"`)

        // Request permission based on voice command
        if (randomCommand.includes("‡¶ö‡ßá‡¶ï") || randomCommand.includes("‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ")) {
          requestPermission("analyze", "‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£", "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ï‡ßã‡¶° ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á")
        }
      }, 3000)
    } else {
      addToConsole("üõë ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß")
    }
  }

  const handleVoiceOutput = (text: string) => {
    if (!privacySettings.voiceOutput) {
      addToConsole("‚ùå ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá")
      return
    }

    setIsSpeaking(true)
    addToConsole(`üîà ‡¶¨‡¶≤‡¶õ‡¶ø: "${text}"`)

    // Simulate TTS
    setTimeout(() => {
      setIsSpeaking(false)
      addToConsole("üîá ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®")
    }, 2000)
  }

  const simulateAIAnalysis = () => {
    if (!privacySettings.aiSuggestions) {
      addToConsole("‚ùå AI ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá")
      return
    }

    requestPermission("analyze", "‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á", "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ï‡ßã‡¶° ‡¶™‡¶°‡¶º‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ì ‡¶â‡¶®‡ßç‡¶®‡¶§‡¶ø‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã")
  }

  const files = [
    { name: "main.js", type: "file", icon: FileText },
    { name: "utils.js", type: "file", icon: FileText },
    { name: "components", type: "folder", icon: Folder },
    { name: "styles.css", type: "file", icon: FileText },
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-600 rounded-lg">
                <Code className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶∏‡¶ø ‡¶ï‡ßã‡¶° ‡¶è‡¶°‡¶ø‡¶ü‡¶∞</h1>
                <p className="text-sm text-gray-600">‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‚Ä¢ ‡¶ó‡ßã‡¶™‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‚Ä¢ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶ø‡¶§</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                <Lock className="h-3 w-3 mr-1" />
                ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§
              </Badge>
              <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                <Shield className="h-3 w-3 mr-1" />
                ‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®
              </Badge>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Sidebar */}
          <div className="lg:col-span-1">
            <Tabs defaultValue="files" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="files">‡¶´‡¶æ‡¶á‡¶≤</TabsTrigger>
                <TabsTrigger value="settings">‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</TabsTrigger>
              </TabsList>

              <TabsContent value="files" className="space-y-4">
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm">‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    {files.map((file, index) => (
                      <div
                        key={index}
                        className={`flex items-center gap-2 p-2 rounded cursor-pointer hover:bg-gray-100 ${
                          selectedFile === file.name ? "bg-blue-100" : ""
                        }`}
                        onClick={() => {
                          if (file.type === "folder") {
                            requestPermission("scan", "‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®", `"${file.name}" ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶á`)
                          } else {
                            setSelectedFile(file.name)
                          }
                        }}
                      >
                        <file.icon className="h-4 w-4 text-gray-500" />
                        <span className="text-sm">{file.name}</span>
                      </div>
                    ))}
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm">‡¶®‡ßã‡¶ü‡¶∏</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Textarea placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡ßã‡¶ü‡¶∏ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..." className="min-h-[100px] text-sm" />
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="settings" className="space-y-4">
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm flex items-center gap-2">
                      <Shield className="h-4 w-4" />
                      ‡¶ó‡ßã‡¶™‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {Object.entries(privacySettings).map(([key, value]) => (
                      <div key={key} className="flex items-center justify-between">
                        <label className="text-sm font-medium">
                          {key === "autoScan" && "‡¶Ö‡¶ü‡ßã ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®"}
                          {key === "voiceInput" && "‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü"}
                          {key === "voiceOutput" && "‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü"}
                          {key === "aiSuggestions" && "AI ‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®"}
                          {key === "memoryStorage" && "‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£"}
                          {key === "internetAccess" && "‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏"}
                        </label>
                        <Switch
                          checked={value}
                          onCheckedChange={(checked) => setPrivacySettings((prev) => ({ ...prev, [key]: checked }))}
                        />
                      </div>
                    ))}
                  </CardContent>
                </Card>

                <Alert>
                  <Shield className="h-4 w-4" />
                  <AlertDescription className="text-sm">
                    ‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞‡ßá‡¶á ‡¶•‡¶æ‡¶ï‡ßá‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º ‡¶®‡¶æ‡•§
                  </AlertDescription>
                </Alert>
              </TabsContent>
            </Tabs>
          </div>

          {/* Main Editor Area */}
          <div className="lg:col-span-3 space-y-4">
            {/* Code Editor */}
            <Card className="flex-1">
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-sm">‡¶ï‡ßã‡¶° ‡¶è‡¶°‡¶ø‡¶ü‡¶∞</CardTitle>
                  <div className="flex items-center gap-2">
                    <Button size="sm" variant="outline" onClick={simulateAIAnalysis} className="text-xs bg-transparent">
                      <Brain className="h-3 w-3 mr-1" />
                      ‡¶ï‡ßã‡¶° ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
                    </Button>
                    {selectedFile && (
                      <Badge variant="secondary" className="text-xs">
                        {selectedFile}
                      </Badge>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Textarea
                  ref={textareaRef}
                  value={code}
                  onChange={(e) => setCode(e.target.value)}
                  className="min-h-[400px] font-mono text-sm"
                  placeholder="// ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                />

                {analysisResult && (
                  <Alert className="mt-4">
                    <Brain className="h-4 w-4" />
                    <AlertDescription>
                      <strong>AI ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:</strong> {analysisResult}
                      <div className="mt-2 flex gap-2">
                        <Button
                          size="sm"
                          onClick={() => {
                            requestPermission("edit", "‡¶ï‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ", "‡¶∏‡¶æ‡¶ú‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á")
                          }}
                        >
                          ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => setAnalysisResult(null)}>
                          ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                        </Button>
                      </div>
                    </AlertDescription>
                  </Alert>
                )}
              </CardContent>
            </Card>

            {/* Bottom Console */}
            <Card>
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-sm flex items-center gap-2">
                    <Terminal className="h-4 w-4" />
                    ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶ì ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡¶æ‡¶∞
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      variant={isRecording ? "destructive" : "default"}
                      onClick={handleVoiceInput}
                      disabled={!privacySettings.voiceInput}
                    >
                      {isRecording ? <MicOff className="h-3 w-3" /> : <Mic className="h-3 w-3" />}
                      {isRecording ? "‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®" : "‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®"}
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleVoiceOutput("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá!")}
                      disabled={!privacySettings.voiceOutput || isSpeaking}
                    >
                      {isSpeaking ? <VolumeX className="h-3 w-3" /> : <Volume2 className="h-3 w-3" />}
                      {isSpeaking ? "‡¶¨‡¶≤‡¶õ‡¶ø..." : "‡¶∂‡ßÅ‡¶®‡ßÅ‡¶®"}
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-32 w-full border rounded p-3 bg-gray-50">
                  {consoleOutput.map((output, index) => (
                    <div key={index} className="text-xs text-gray-700 mb-1">
                      {output}
                    </div>
                  ))}
                </ScrollArea>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Permission Dialog */}
      <Dialog open={!!currentPermission} onOpenChange={() => setCurrentPermission(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5 text-blue-600" />
              ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®
            </DialogTitle>
            <DialogDescription>{currentPermission?.message}</DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <Alert>
              <Eye className="h-4 w-4" />
              <AlertDescription>
                <strong>‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§:</strong> {currentPermission?.details}
              </AlertDescription>
            </Alert>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => handlePermissionResponse(false)}>
              <XCircle className="h-4 w-4 mr-2" />
              ‡¶®‡¶æ, ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á
            </Button>
            <Button onClick={() => handlePermissionResponse(true)}>
              <CheckCircle className="h-4 w-4 mr-2" />
              ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶®
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
